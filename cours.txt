TERRAFORM INTRODUCTION
--> déploiement de VM pour créer notre infrasctrutr nécessaire pour le projet et ensuite utilisation ansible pour cloner
et déployer le projet.
.tf : fichiers de config.

    DEVOPs
CI/CD : Integration continue et déploiement continu
--> 

attention différent de conteneur : identité qui a son propre os 
miniaturisation de VM avec os 

IaC: Infrastructure as code 
Gestion de l'approvisionnement de l'infra via le vode plutot que des outils manuels; via fichiers de configuration, et lors de son lancement 
on va venir créer l'infrastructure.

Terraform core - terraform state .tfstate --> donne l'état - plan 

Les ressources "type de ressource ex: aws_instance" "nomàdonner" : ami : role
                instance : instance utilisée pour le projet 

Datasource : pour récupérer des infos via un provider (AWS, Azure...)

Les variables : permet de modulariser le code 
Précédence de données : est-ce que c'est la première que je déclare une variable et son importance 

Les outputs : permettent d'écrire dans la console lors de l'exécution

Les modules :

DATAIKU
















Exercice1:

Initializing provider plugins...
- Reusing previous version of hashicorp/null from the dependency lock file
- Using previously-installed hashicorp/null v3.2.2

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
(base) annelou@MacBook-Air-de-Chartier TP_API-Data % terraform plan -out=tfplan
var.input_variable
  Input variable to be written to film.txt

  Enter a value: La vie est un long fleuve tranquille


Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # null_resource.exo1 will be created
  + resource "null_resource" "exo1" {
      + id = (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.

───────────────────────────────────────────────────────────────────────────

Saved the plan to: tfplan

To perform exactly these actions, run the following command to apply:
    terraform apply "tfplan"
(base) annelou@MacBook-Air-de-Chartier TP_API-Data % terraform apply "tfplan"
null_resource.exo1: Creating...
null_resource.exo1: Provisioning with 'local-exec'...
null_resource.exo1 (local-exec): Executing: ["/bin/sh" "-c" "echo 'La vie est un long fleuve tranquille' >> film.txt"]
null_resource.exo1: Creation complete after 0s [id=3424793553779502054]

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.
(base) annelou@MacBook-Air-de-Chartier TP_API-Data % s

resource null_ressource exo1 {
    provision "local-exec" {
        command = "echo '${var.script_name}' > film.txt
    }
}